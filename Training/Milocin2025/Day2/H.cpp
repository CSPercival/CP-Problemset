// This file was generated by Clank
#include<bits/stdc++.h>
#define st first
#define nd second
#define all(x) x.begin(), x.end()
#define BOOST cin.tie(NULL); ios_base::sync_with_stdio(false);
 
// #define int ll
typedef long long ll;

using namespace std;
template <typename T> struct tag:reference_wrapper <T>{ using reference_wrapper <T>::reference_wrapper; };
template <typename T1, typename T2> static inline tag <ostream> operator<<(tag <ostream> os, pair<T1, T2> const& p){ return os.get()<<"{"<<p.first<<", "<<p.second<<"}", os;}
template <typename Other> static inline tag <ostream> operator<<(tag <ostream> os, Other const& o){ os.get()<<o; return os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, vector <T> const& v){ os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, set <T> const& s){ vector <T> v; for (auto i: s) v.push_back(i); os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }

const int POW = 20;

int n, q;
int lim;
string port;
vector<int> jump;
vector<vector<int>> bjump;

struct Query{
    int sta, fin, k, id;
};

struct Node{
    int par, sz, shift; 
};

struct UF{
    int n;
    vector<Node> nodes;
    UF(int inn){
        n = inn;
        nodes.resize(n);
        for(int i = 0; i < n; i++){
            nodes[i] = {i,1,0};
        }
    }

    int Union(int a, int b){
        if(nodes[a].sz < nodes[b].sz) swap(a,b);
        nodes[b].par = a;
        nodes[b].shift -= nodes[a].shift;
        nodes[a].sz += nodes[b].sz;
        return a;
    }

    pair<int,int> Find(int idx){
        if(nodes[idx].par == idx){
            // nodes[idx].shift = 0;
            return {idx, nodes[idx].shift};
        }
        pair<int,int> tmpans = Find(nodes[idx].par);
        nodes[idx].par = tmpans.st;
        tmpans.nd += nodes[idx].shift;
        nodes[idx].shift = tmpans.nd - nodes[nodes[idx].par].shift;
        return tmpans;
    }

    int get_ans(int idx){
        // if(nodes[idx].par == idx) return 
        // pair<int,int> tmpans = Find(idx);
        return Find(idx).nd;
    }

    void add(int idx, int val){
        nodes[idx].shift += val;
    }
};

struct Event{
    int id, md;
};

void simsmall(vector<Query> &queries, vector<int> &ans, int k){
    vector<vector<Event>> events(n + 1);
    for(auto que : queries){
        events[que.fin].push_back({que.id, 0});
    }
    for(auto que : queries){
        events[que.sta].push_back({que.id, 1});
    }
    UF ufs(q + 1);
    for(int i = 0; i < n; i++){
        reverse(all(events[i]));
        while(events[i].size() && events[i].back().md == 0){
            ans[events[i].back().id] = ufs.get_ans(events[i].back().id);
            events[i].pop_back();
        }
        if(events[i].empty()) continue;
        int nidx = events[i].back().id;
        events[i].pop_back();
        while(events[i].size()){
            nidx = ufs.Union(nidx, events[i].back().id);
            events[i].pop_back();
        }
        ufs.add(nidx, 1);
        events[jump[min(n, i + k)]].push_back({nidx, 1});
    }
}

int simbig(int sta, int fin, int k){
    int ans = 0;
    while(sta < fin){
        ans++;
        sta = jump[min(n, sta + k)];
    }
    return ans;
}
 
int32_t main(){
    BOOST;
 
    cin >> n >> q;
    int lim = sqrt(n);
    cin >> port;

    jump.resize(n + 1);
    iota(all(jump), 0);
    for(int i = n - 2; i >= 0; i--){
        if(port[i] == '1'){
            jump[i] = jump[i + 1];
        }
    }

    int sta, fin, k;
    vector<int> ans(q,0);
    vector<vector<Query>> queries(lim + 1);
    for(int i = 0; i < q; i++){
        cin >> sta >> fin >> k;
        sta--;
        fin--;
        if(sta > fin) swap(sta,fin);
        sta = jump[sta];
        if(sta >= fin){
            ans[i] = 0;
            continue;
        }
        if(k >= lim){
            ans[i] = simbig(sta, fin, k);
        } else {
            queries[k].push_back({sta,fin,k,i});
        }
    }
    for(int i = 1; i < lim; i++){
        if(queries[i].size()){
            simsmall(queries[i], ans, i);
        }
    }

    for(int i = 0; i < q; i++){
        cout << ans[i] << "\n";
    }
    return 0;
}
