// This file was generated by Clank
#include<bits/stdc++.h>
#define st first
#define nd second
#define all(x) x.begin(), x.end()
#define BOOST cin.tie(NULL); ios_base::sync_with_stdio(false);
 
// #define int ll
typedef long long ll;

using namespace std;
template <typename T> struct tag:reference_wrapper <T>{ using reference_wrapper <T>::reference_wrapper; };
template <typename T1, typename T2> static inline tag <ostream> operator<<(tag <ostream> os, pair<T1, T2> const& p){ return os.get()<<"{"<<p.first<<", "<<p.second<<"}", os;}
template <typename Other> static inline tag <ostream> operator<<(tag <ostream> os, Other const& o){ os.get()<<o; return os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, vector <T> const& v){ os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, set <T> const& s){ vector <T> v; for (auto i: s) v.push_back(i); os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }


void solve(){
    int n; 
    cin >> n;
    string s; cin >> s;
    s = "#" + s;
    vector<int> pre(n + 1, 0);
    map<int,int> where;
    int bil = 0;
    for(int i = 1; i <= n; i++){
        if(s[i] == 'a'){
            bil++;
        } else {
            bil--;
        }
    }
    if(bil == 0){
        cout << "0\n";
        return;
    }
    // cout << "bil " << bil << "\n";
    where[0] = 0;
    int ans = 1e9;
    for(int i = 1; i <= n; i++){
        pre[i] = pre[i - 1];
        if(s[i] == 'a'){
            pre[i]++;
        } else {
            pre[i]--;
        }
        if(where.find((bil - pre[i]) * -1) != where.end()){
            ans = min(ans, i - where[(bil - pre[i]) * -1]);
        }
        where[pre[i]] = i;
    }
    if(ans == 1e9 || ans == n){
        ans = -1;
    }
    cout << ans << "\n";
}

 
int32_t main(){
    BOOST;
 
    int q = 1; cin >> q;
    while(q--){
        solve();
    }
    return 0;
}
