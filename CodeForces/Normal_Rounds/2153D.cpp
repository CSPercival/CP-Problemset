// This file was generated by Clank
#include<bits/stdc++.h>
#define st first
#define nd second
#define all(x) x.begin(), x.end()
#define BOOST cin.tie(NULL); ios_base::sync_with_stdio(false);
 
#define int ll
typedef long long ll;

using namespace std;
template <typename T> struct tag:reference_wrapper <T>{ using reference_wrapper <T>::reference_wrapper; };
template <typename T1, typename T2> static inline tag <ostream> operator<<(tag <ostream> os, pair<T1, T2> const& p){ return os.get()<<"{"<<p.first<<", "<<p.second<<"}", os;}
template <typename Other> static inline tag <ostream> operator<<(tag <ostream> os, Other const& o){ os.get()<<o; return os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, vector <T> const& v){ os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, set <T> const& s){ vector <T> v; for (auto i: s) v.push_back(i); os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }

ll ans = 0;

bool check_vec(vector<int> &v){
    if(v[0] != v[1] && v[0] != v.back()) return false;

    for(int i = 1; i < v.size(); i++){
        if(v[i] != v[i - 1] && v[i] != v[(i + 1) % v.size()]) return false;
    }
    return true;
}

void f1(vector<int> &a, vector<int> &b, int n, int kzk, ll tans){
    if(kzk == n){
        if(check_vec(b)){
            ans = min(ans, tans);
        }
        return;
    }
    for(int i = 0; i < n; i++){
        b[kzk] = a[i];
        f1(a, b, n, kzk + 1, tans + abs(b[kzk] - a[kzk]));
    }
}

vector<pair<int,int>> dp[200010][2];

void get5(vector<int> &a, vector<int> &v5, int idx){
    v5.clear();
    idx -= 2;
    if(idx < 0) idx += a.size();
    for(int i = 0; i <= 4; i++, idx = (idx + 1) % a.size()){
        v5.push_back(a[idx]);
    }
}

void f2(vector<int> &a, int sidx, int eidx){
    int n = a.size();
    vector<int> tmpv;
    for(int i = sidx; i < eidx; i++){
        get5(a, tmpv, i);
        dp[i][0].clear();
        dp[i][1].clear();
        ll mini = 1e18;
        for(int j = 0; j < dp[i - 1][1].size(); j++){
            mini = min(mini, dp[i-1][1][j].nd);
        }
        for(int j : tmpv){
            int h;
            for(h = 0; h < 5; h++){
                if(dp[i - 1][0][h].st == j) break;
            }
            dp[i][0].push_back({j, mini + abs(a[i] - j)});
            if(h != 5){
                dp[i][1].push_back({j, abs(a[i] - j) + min(dp[i - 1][0][h].nd, dp[i - 1][1][h].nd)});
            }
        }
    }

    int idx0 = eidx - 2;
    int idx1 = eidx - 1;
    int idx2 = eidx % n;

    get5(a, tmpv, idx1);
    ll tans = 1e18;
    ll mini = 1e18;
    for(auto i : dp[idx0][1]){
        mini = min(mini, i.nd);
    }
    for(int i : tmpv){
        int h1, h2;
        for(h1 = 0; h1 < 5; h1++){
            if(dp[idx0][0][h1].st == i) break;
        }
        for(h2 = 0; h2 < 5; h2++){
            if(dp[idx2][0][h2].st == i) break;
        }
        if(h1 != 5){
            tans = min(tans, dp[idx0][0][h1].nd + abs(a[idx1] - i));
        }
        if(h2 != 5){
            tans = min(tans, mini + abs(a[idx1] - i));
        }
    }
    ans = min(ans, tans);
}

void solve(){
    int n; 
    cin >> n;
    vector<int> a(n + 1);
    for(int i = 0; i < n; i++){
        cin >> a[i];
    }
    ans = 1e18;
    if(n <= 7){
        vector<int> b(n, 0);
        f1(a, b, n, 0, 0);
        cout << ans << "\n";
        return;
    }
    
    vector<int> tmpv;
    get5(a,tmpv,1);
    for(int i : tmpv){
        dp[1][1].push_back({i, abs(a[0] - i) + abs(a[1] - i)});
    }
    dp[1][0] = dp[1][1];
    dp[0][0] = dp[1][1];
    dp[0][1] = dp[1][1];
    f2(a, 2, n);
    
    get5(a,tmpv,0);
    dp[0][0].clear();
    for(int i : tmpv){
        dp[0][0].push_back({i, abs(a[n - 1] - i) + abs(a[0] - i)});
    }
    dp[0][1] = dp[0][0];
    dp[n - 1][0] = dp[0][0];
    dp[n - 1][1] = dp[0][0];

    f2(a, 1, n - 1);
    cout << ans << "\n";
}

 
int32_t main(){
    BOOST;
 
    int q = 1; cin >> q;
    while(q--){
        solve();
    }
    return 0;
}
