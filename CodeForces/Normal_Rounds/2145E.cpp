// This file was generated by Clank
#include<bits/stdc++.h>
#define st first
#define nd second
#define all(x) x.begin(), x.end()
#define BOOST cin.tie(NULL); ios_base::sync_with_stdio(false);
 
// #define int ll
typedef long long ll;

using namespace std;
template <typename T> struct tag:reference_wrapper <T>{ using reference_wrapper <T>::reference_wrapper; };
template <typename T1, typename T2> static inline tag <ostream> operator<<(tag <ostream> os, pair<T1, T2> const& p){ return os.get()<<"{"<<p.first<<", "<<p.second<<"}", os;}
template <typename Other> static inline tag <ostream> operator<<(tag <ostream> os, Other const& o){ os.get()<<o; return os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, vector <T> const& v){ os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, set <T> const& s){ vector <T> v; for (auto i: s) v.push_back(i); os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }

int ac, dr, n;
int lim = 2e6 + 5;
vector<pair<int,int>> cust;

struct SegTree{
    int n;
    int shift = 1;
    vector<int> t;
    vector<int> p;
    SegTree(vector<int> ai){
        n = ai.size();
        while(shift <= n) shift <<= 1;
        t.resize(2 * shift);
        p.resize(2 * shift);

        for(int i = 0; i < n; i++){
            t[i + shift] = ai[i];
        }
        for(int i = shift - 1; i > 0; i--){
            t[i] = min(t[i << 1], t[(i << 1) + 1]);
        }
    }

    void push(int idx){
        t[idx] += p[idx];
        if(idx < shift){
            p[idx << 1] += p[idx];
            p[(idx << 1) + 1] += p[idx];
        }
        p[idx] = 0;
    }

    void modify_(int cl, int cr, int ql, int qr,int idx, int val){
        if(cr <= ql || qr <= cl) return;
        if(ql <= cl && cr <= qr){
            p[idx] += val;
            push(idx);
            return;
        }
        push(idx);
        modify_(cl, (cl + cr)/2, ql, qr, idx << 1, val);
        modify_((cl + cr)/2, cr, ql, qr, (idx << 1) + 1, val);
        push(idx << 1);
        push((idx << 1) + 1);
        t[idx] = min(t[idx << 1], t[(idx << 1) + 1]);
    }

    void modify(int l, int r, int val){
        modify_(0, shift, l, r, 1, val);
    }

    int query_(int l, int r, int idx){
        if(idx >= shift) return l;
        push(idx << 1);
        push((idx << 1) + 1);
        if(t[idx << 1] <= 0){
            return query_(l, (r + l)/2, idx << 1);
        } else {
            return query_((r + l)/2, r, (idx << 1) + 1);
        }
    }

    int query(){
        assert(t[1] <= 0);
        return query_(0, shift, 1);
    }
};

int cost(pair<int,int> c){
    return max(c.st - ac, 0) + max(c.nd - dr, 0);
}

void solve(){
    cin >> ac >> dr;
    cin >> n;
    
    cust.resize(n);
    int ai, di;
    for(int i = 0; i < n; i++){
        cin >> cust[i].st;
    }
    for(int i = 0; i < n; i++){
        cin >> cust[i].nd;
    }
    vector<int> pre(lim + 1, 0);
    for(auto i : cust){
        pre[cost(i)]++;
    }
    for(int i = 1; i < lim; i++){
        pre[i] += pre[i - 1];
    }
    for(int i = 1; i < lim; i++){
        pre[i] -= i;
    }

    SegTree ds(pre);

    int m; cin >> m;
    int k;
    while(m--){
        cin >> k >> ai >> di;
        k--;
        ds.modify(cost(cust[k]), lim, -1);
        cust[k] = {ai, di};
        ds.modify(cost(cust[k]), lim, 1);
        cout << ds.query() << "\n";
    }
}

 
int32_t main(){
    BOOST;
 
    int q = 1; //cin >> q;
    while(q--){
        solve();
    }
    return 0;
}
