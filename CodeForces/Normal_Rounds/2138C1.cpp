// This file was generated by Clank
#include<bits/stdc++.h>
#define st first
#define nd second
#define all(x) x.begin(), x.end()
#define BOOST cin.tie(NULL); ios_base::sync_with_stdio(false);
 
// #define int ll
typedef long long ll;

using namespace std;
template <typename T> struct tag:reference_wrapper <T>{ using reference_wrapper <T>::reference_wrapper; };
template <typename T1, typename T2> static inline tag <ostream> operator<<(tag <ostream> os, pair<T1, T2> const& p){ return os.get()<<"{"<<p.first<<", "<<p.second<<"}", os;}
template <typename Other> static inline tag <ostream> operator<<(tag <ostream> os, Other const& o){ os.get()<<o; return os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, vector <T> const& v){ os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, set <T> const& s){ vector <T> v; for (auto i: s) v.push_back(i); os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }

int dfs(int idx, int par, vector<int> &dep,vector<vector<int>> &g){
    int ans = 1e9;
    for(int i : g[idx]){
        if(i == par) continue;
        dep[i] = dep[idx] + 1;
        ans = min(ans, dfs(i, idx, dep ,g));
    }
    if(g[idx].size() == 0){
        ans = min(ans, dep[idx]);
    }
    return ans;
}

void solve(){
    int n, k; 
    cin >> n >> k;
    vector<int> p(n + 1, 0);
    vector<vector<int>> g(n + 1);
    for(int i = 2; i <= n; i++){
        cin >> p[i];
        g[p[i]].push_back(i);
    }
    vector<int> dep(n + 1, 0);
    dep[1] = 1;
    int max_ans = dfs(1, 0, dep, g);
    vector<int> nom(max_ans + 1);
    for(int i = 1; i <= n; i++){
        if(dep[i] > max_ans) continue;
        nom[dep[i]]++;
    }
    int sumnom = 0;
    // sort(all(nom));
    // cout << nom << "\n";
    vector<int> ilc(n + 1, 0);
    for(int i = 1; i < nom.size(); i++){
        ilc[nom[i]]++;
        if(ilc[nom[i]] == 3){
            ilc[nom[i]]-= 2;
            nom.push_back(nom[i] * 2);
        }
    }
    nom.clear();
    for(int i = 1; i <= n; i++){
        for(int j = 0; j < ilc[i]; j++){
            nom.push_back(i);
        }
    }
    // cout << nom << "\n";
    vector<int> knap(n + 2, -1);
    knap[0] = 0;
    for(int i = 1; i < nom.size(); i++){
        sumnom += nom[i];
        for(int j = n; j >= 0; j--){
            if(knap[j] == -1) continue;
            knap[min(n + 1, j + nom[i])] = max(knap[min(n + 1, j + nom[i])], knap[j] + 1);
        }
    }
    // cout << knap << "\n";
    int good = 0;
    for(int i = 0; i <= n - sumnom; i++){
        if(knap[max(k - i, 0)] != -1){
            good = 1;
            break;
        }
    }
    if(good){
        cout << max_ans << "\n";
    } else {
        cout << max_ans -1  << "\n";
    }
}

 
int32_t main(){
    BOOST;
 
    int q = 1; cin >> q;
    while(q--){
        solve();
    }
    return 0;
}
