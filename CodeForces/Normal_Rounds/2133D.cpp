// This file was generated by Clank
#include<bits/stdc++.h>
#define st first
#define nd second
#define all(x) x.begin(), x.end()
#define BOOST cin.tie(NULL); ios_base::sync_with_stdio(false);
 
#define int ll
typedef long long ll;

using namespace std;
template <typename T> struct tag:reference_wrapper <T>{ using reference_wrapper <T>::reference_wrapper; };
template <typename T1, typename T2> static inline tag <ostream> operator<<(tag <ostream> os, pair<T1, T2> const& p){ return os.get()<<"{"<<p.first<<", "<<p.second<<"}", os;}
template <typename Other> static inline tag <ostream> operator<<(tag <ostream> os, Other const& o){ os.get()<<o; return os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, vector <T> const& v){ os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, set <T> const& s){ vector <T> v; for (auto i: s) v.push_back(i); os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }

ll sum(int l, int r, vector<ll> &pre){
    if(r < l) return 1e18;
    return pre[r] - pre[l - 1];
}

void solve(){
    int n; 
    cin >> n;
    vector<int> a(n + 5, 1);
    vector<ll> pre(n + 5, 0);
    for(int i = 1; i <= n + 4; i++){
        if(i <= n) cin >> a[i];
        pre[i] = pre[i - 1] + a[i] - 1;
    }
    // pre[n + 1] = pre[n];
    // ll ans = 0;
    int idx;
    vector<ll> dp(n + 5, 0);
    int last = n + 1, last2 = n + 1, last3 = n + 1;
    for(idx = n; idx > 0; idx--){
        int fallen = max(0LL, a[idx + 1] - idx);
        dp[idx] = a[idx] + min({dp[idx + 1], fallen + dp[idx + 2], 
                                fallen + a[idx + 2] - 1 + dp[idx + 3],
                                fallen + sum(idx + 2, last - 2, pre) + dp[last - 1],
                                fallen + sum(idx + 2, last - 1, pre) + dp[last],
                                fallen + sum(idx + 2, last2 - 2, pre) + dp[last2 - 1],
                                fallen + sum(idx + 2, last2 - 1, pre) + dp[last2],
                                fallen + sum(idx + 2, last3 - 2, pre) + dp[last3 - 1],
                                fallen + sum(idx + 2, last3 - 1, pre) + dp[last3]});
        if(a[idx] > 1){
            last3 = last2;
            last2 = last;
            last = idx;
        }
        // dp[idx] = min(dp[idx + 2] + a[idx] + a[idx + 1] - min(a[idx + 1], idx + 1), dp[idx + 3] + a[idx] + a[idx + 1] + a[idx + 2] - 1 - min(idx + 1, a[idx + 1]));
    }
    // cout << dp << "\n";

    cout << dp[1] << "\n";
}

 
int32_t main(){
    BOOST;
 
    int q = 1; cin >> q;
    while(q--){
        solve();
    }
    return 0;
}
