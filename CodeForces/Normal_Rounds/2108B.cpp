// This file was generated by Clank
#include<bits/stdc++.h>
#define st first
#define nd second
#define all(x) x.begin(), x.end()
#define BOOST cin.tie(NULL); ios_base::sync_with_stdio(false);
 
// #define int ll
typedef long long ll;

using namespace std;
template <typename T> struct tag:reference_wrapper <T>{ using reference_wrapper <T>::reference_wrapper; };
template <typename T1, typename T2> static inline tag <ostream> operator<<(tag <ostream> os, pair<T1, T2> const& p){ return os.get()<<"{"<<p.first<<", "<<p.second<<"}", os;}
template <typename Other> static inline tag <ostream> operator<<(tag <ostream> os, Other const& o){ os.get()<<o; return os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, vector <T> const& v){ os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, set <T> const& s){ vector <T> v; for (auto i: s) v.push_back(i); os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }


void solve(){
    int n, x; 
    cin >> n >> x;
    if(x == 1){
        if(n == 2){
            cout << "5\n";
            return;
        }
    }
    if(x == 0 && n == 1){
        cout << "-1\n";
        return;
    }
    int pot = 1;
    while(pot <= x) pot <<= 1;

    int tpot = pot;
    int smpot, ipot = 0;
    while(tpot > 0){
        if(tpot & x){
            ipot++;
            smpot = tpot;
        }
        tpot >>= 1;
    }
    if(ipot >= n){
        cout << x << "\n";
        return;
    }
    int ans = 0;
    n -= ipot;
    if(n & 1){
        if(x == 1 || x == 0){
            cout << x + max(n - 3, 0) + 6 << "\n";
        } else {
            cout << x + n + 1 << "\n";
        }
    } else {
        cout << x + n << "\n";
    }
}

 
int32_t main(){
    BOOST;
 
    int q = 1; cin >> q;
    while(q--){
        solve();
    }
    return 0;
}
