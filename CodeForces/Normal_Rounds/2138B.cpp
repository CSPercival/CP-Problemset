// This file was generated by Clank
#include<bits/stdc++.h>
#define st first
#define nd second
#define all(x) x.begin(), x.end()
#define BOOST cin.tie(NULL); ios_base::sync_with_stdio(false);
 
// #define int ll
typedef long long ll;

using namespace std;
template <typename T> struct tag:reference_wrapper <T>{ using reference_wrapper <T>::reference_wrapper; };
template <typename T1, typename T2> static inline tag <ostream> operator<<(tag <ostream> os, pair<T1, T2> const& p){ return os.get()<<"{"<<p.first<<", "<<p.second<<"}", os;}
template <typename Other> static inline tag <ostream> operator<<(tag <ostream> os, Other const& o){ os.get()<<o; return os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, vector <T> const& v){ os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, set <T> const& s){ vector <T> v; for (auto i: s) v.push_back(i); os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }

struct SparseTable{
    int n;
    vector<vector<int>> table;
    vector<int> pot2;
    SparseTable(vector<int> &a){
        // cout << a << "\n";
        n = a.size();
        table.assign(30, vector<int>(n + 1, 0));
        pot2.assign(n + 1, 0);
        int tmppot = 2;
        for(int i = 1; i < n; i++){
            table[0][i] = a[i];
            pot2[i] = pot2[i - 1];
            if(i == tmppot){
                pot2[i]++;
                tmppot <<= 1;
            }
        }
        // cout << table << "\n";

        // cout << pot2 << "\n";
        for(int pot = 1, pidx = 1; pot <= n; pot <<= 1, pidx++){
            for(int i = 0; i < n; i++){
                table[pidx][i] = max(table[pidx - 1][i], table[pidx - 1][min(i + pot, n - 1)]);
            }
        }
        // cout << table << "\n";
    }

    int maxoseg(int l, int r){
        // cout << l << " - " << r - (1 << pot2[r - l]) + 1 << " " << pot2[r-l]<< endl;
        return max(table[pot2[r - l]][l], table[pot2[r - l]][r - (1 << pot2[r - l]) + 1]);
    }
};

struct ST_SetMax{
    int n;
    int shift = 1;
    vector<int> t;

    ST_SetMax(int in_n, vector<int> &a){
        n = in_n;
        while(shift < n) shift <<= 1;
        t.assign(2 * shift, 0);
        for(int i = 0; i < n; i++) t[i + shift] = a[i];
        for(int i = shift - 1; i > 0; i--) t[i] = max(t[i << 1], t[(i << 1) + 1]);
    }

    void update(int idx, int val){
        for(idx += shift, t[idx] = val; idx > 1; idx >>= 1) t[idx >> 1] = max(t[idx], t[idx ^ 1]);
    }

    int query(int l, int r){
        int ans = t[l + shift];
        for(l += shift, r += shift; l < r; l >>= 1, r >>= 1){
            if(l & 1) ans = max(ans, t[l++]);
            if(r & 1) ans = max(ans, t[--r]);
        } 
        return ans;
    }
};

void solve(){
    int n, q; 
    cin >> n >> q;
    vector<int> a(n + 1);
    vector<int> a2(n + 2);
    for(int i = 1; i <= n; i++){
        cin >> a[i];
        a2[i + 1] = a[i];
    }
    a[0] = 1e9;
    a2[0] = 1e9 +1;
    a2[1] = 1e9;
    vector<int> mnl(n + 1);
    vector<int> mnl2(n + 2);
    vector<pair<int,int>> stos;
    stos.push_back({a[0], 0});
    for(int i = 1; i <= n; i++){
        while(a[i] > stos.back().st) stos.pop_back();
        mnl[i] = stos.back().nd;
        stos.push_back({a[i],i});
    }
    stos.clear();
    stos.push_back({a[0], 0});
    for(int i = 1; i <= n; i++){
        while(a[i] > stos.back().st) stos.pop_back();
        mnl[i] = stos.back().nd;
        stos.push_back({a[i],i});
    }
    // stos.assign(n + 2, 0);
    // stos.push_back({-1, 1e9});
    // stos[0] = 1e9;
    vector<int> stos2(n + 2, 0);
    ST_SetMax algotree(n + 2, stos2);
    // stos2[0] = 1s
    // cout << mnl << "\n";
    for(int i = 1; i <= n; i++){
        algotree.update(a[i], mnl[i]);
        mnl[i] = algotree.query(a[i] + 1, n + 1);
    }
    // cout << mnl << "\n";
    // for(int i = n; i >= 0; i--){
    //     mnl[i] = mnl[mnl[i]];
    // }
    // cout << "git1" << endl;
    SparseTable spt(mnl);
    // cout << "git2" << endl;
    int l,r;
    while(q--){
        cin >> l >> r;
        if(spt.maxoseg(l,r) >= l){
            cout << "NO\n";
        } else {
            cout << "YES\n";
        }
    }
}

 
int32_t main(){
    BOOST;
 
    int q = 1; cin >> q;
    while(q--){
        solve();
    }
    return 0;
}
