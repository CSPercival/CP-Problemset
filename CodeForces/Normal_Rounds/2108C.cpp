// This file was generated by Clank
#include<bits/stdc++.h>
#define st first
#define nd second
#define all(x) x.begin(), x.end()
#define BOOST cin.tie(NULL); ios_base::sync_with_stdio(false);
 
// #define int ll
typedef long long ll;

using namespace std;
template <typename T> struct tag:reference_wrapper <T>{ using reference_wrapper <T>::reference_wrapper; };
template <typename T1, typename T2> static inline tag <ostream> operator<<(tag <ostream> os, pair<T1, T2> const& p){ return os.get()<<"{"<<p.first<<", "<<p.second<<"}", os;}
template <typename Other> static inline tag <ostream> operator<<(tag <ostream> os, Other const& o){ os.get()<<o; return os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, vector <T> const& v){ os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, set <T> const& s){ vector <T> v; for (auto i: s) v.push_back(i); os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }


void solve(){
    int n; 
    cin >> n;
    vector<int> oa(n);
    vector<pair<int,int>> a(n);
    map<int, vector<int>> where;
    for(int i = 0; i < n; i++){
        cin >> a[i].st;
        a[i].nd = i;
        where[a[i].st].push_back(i);
        oa[i] = a[i].st;
    }
    sort(all(a), greater<pair<int,int>>());

    priority_queue<pair<int,int>> pq;
    vector<int> c(n, 0);
    int ans = 0;
    // cout << a << "\n";
    int new_idx;
    // cout << oa << "\n";
    // cout << a << "\n";
    for(int i = 0; i < n; i++){
        while(pq.size() && c[pq.top().nd]) pq.pop();
        // cout << a[i].st << " " << a[i].nd << "            ";
        // if(pq.size()) cout << pq.top().st << " " << pq.top().nd;
        // cout << "\n";
        if(pq.empty() || pq.top().st != a[i].st){
            ans++;
            // cout << "ans++\n";
            while(c[where[a[i].st].back()]) where[a[i].st].pop_back(); 
            new_idx = where[a[i].st].back();
            where[a[i].st].pop_back();     
        } else {
            pair<int,int> tmpp = pq.top();
            pq.pop();
            new_idx = tmpp.nd;
        }
        c[new_idx] = 1;
        if(!c[max(0, new_idx - 1)]){
            pq.push({oa[new_idx - 1], new_idx - 1});
        }
        if(!c[min(n - 1, new_idx + 1)]){
            pq.push({oa[new_idx + 1], new_idx + 1});
        }
    }
    cout << ans << "\n";
}

 
int32_t main(){
    BOOST;
 
    int q = 1; cin >> q;
    while(q--){
        solve();
    }
    return 0;
}
