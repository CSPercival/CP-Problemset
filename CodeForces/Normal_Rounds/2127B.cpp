// This file was generated by Clank
#include<bits/stdc++.h>
#define st first
#define nd second
#define all(x) x.begin(), x.end()
#define BOOST cin.tie(NULL); ios_base::sync_with_stdio(false);
 
// #define int ll
typedef long long ll;

using namespace std;
template <typename T> struct tag:reference_wrapper <T>{ using reference_wrapper <T>::reference_wrapper; };
template <typename T1, typename T2> static inline tag <ostream> operator<<(tag <ostream> os, pair<T1, T2> const& p){ return os.get()<<"{"<<p.first<<", "<<p.second<<"}", os;}
template <typename Other> static inline tag <ostream> operator<<(tag <ostream> os, Other const& o){ os.get()<<o; return os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, vector <T> const& v){ os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, set <T> const& s){ vector <T> v; for (auto i: s) v.push_back(i); os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }

int f1(int idx, int dir, int n){
    if(idx == -1) return 0;
    if(dir == 0){
        //left
        return idx + 1;
    } else {
        return n - idx;
    }
}

void solve(){
    int n, k; 
    cin >> n >> k;
    // vector<int> a(n);
    // for(int i = 0; i < n; i++){
    //     cin >> a[i];
    // }
    string b; cin >> b;
    int fwl = -1, fwr  = -1;
    for(int i = k - 1; i >= 0; i--){
        if(b[i] == '#'){
            fwl = i;
            break;
        }
    }
    for(int i = k - 1; i < n; i++){
        if(b[i] == '#'){
            fwr = i;
            break;
        }
    }
    if(fwl == -1 && fwr == -1 || k == n || k == 1){
        cout << "1\n";
        return;
    }
    cout << max(min(f1(k - 2, 0,n), f1(fwr, 1,n)), min(f1(fwl, 0,n), f1(k, 1,n))) + 1 << "\n";
}

 
int32_t main(){
    BOOST;
 
    int q = 1; cin >> q;
    while(q--){
        solve();
    }
    return 0;
}
