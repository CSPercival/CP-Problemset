// This file was generated by Clank
#include<bits/stdc++.h>
#define st first
#define nd second
#define all(x) x.begin(), x.end()
#define BOOST cin.tie(NULL); ios_base::sync_with_stdio(false);
 
#define int ll
typedef long long ll;

using namespace std;
template <typename T> struct tag:reference_wrapper <T>{ using reference_wrapper <T>::reference_wrapper; };
template <typename T1, typename T2> static inline tag <ostream> operator<<(tag <ostream> os, pair<T1, T2> const& p){ return os.get()<<"{"<<p.first<<", "<<p.second<<"}", os;}
template <typename Other> static inline tag <ostream> operator<<(tag <ostream> os, Other const& o){ os.get()<<o; return os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, vector <T> const& v){ os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, set <T> const& s){ vector <T> v; for (auto i: s) v.push_back(i); os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }

int mod = 1e9 + 7;
int sil[200010];

int dfs(int idx, int par, vector<vector<int>> &g){
    int ans = 1;
    // cout << idx << " dfs\n";
    int bigu = 0;
    for(int u : g[idx]){
        if(u == par) continue;
        if(g[u].size() > 1) bigu++;
        ans = (ans * dfs(u, idx, g)) % mod;
    }
    // ans = max(ans, (long long)1);
    
    int tmp = 1;
    if(par == 0){
        if(bigu > 2){
            return 0;
        }
        if(bigu == 0){
            return (ans * sil[g[idx].size()]) % mod;
        }
        return (ans * sil[g[idx].size() - bigu] * 2) % mod;
    } else {
        if(bigu > 1){
            return 0;
        }
        return (ans * sil[g[idx].size() - 1 - bigu]) % mod;
    }
    
}

void solve(){
    int n, m; 
    cin >> n >> m;
    // vector<int> a(n);
    
    vector<vector<int>> g(n + 1);
    int u,v;
    for(int i = 0; i < m; i++){
        cin >> u >> v;
        g[u].push_back(v);
        g[v].push_back(u);
    }
    if(m != n - 1){
        cout << "0\n";
        return;
    }
    int starti = 1;
    for(int i = 1; i <= n; i++){
        if(g[i].size() > 1){
            starti = i;
            break;
        }
    }
    int ans = dfs(starti, 0, g);
    cout << (ans * 2) % mod << "\n";
}

 
int32_t main(){
    BOOST;
 
    sil[0] = 1;
    for(int i = 1; i <= 2e5 + 5; i++){
        sil[i] = (sil[i - 1] * i) % mod;
    }

    int q = 1; cin >> q;
    while(q--){
        solve();
    }
    return 0;
}
