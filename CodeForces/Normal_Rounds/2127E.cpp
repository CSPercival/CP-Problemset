// This file was generated by Clank
#include<bits/stdc++.h>
#define st first
#define nd second
#define all(x) x.begin(), x.end()
#define BOOST cin.tie(NULL); ios_base::sync_with_stdio(false);
 
#define int ll
typedef long long ll;

using namespace std;
template <typename T> struct tag:reference_wrapper <T>{ using reference_wrapper <T>::reference_wrapper; };
template <typename T1, typename T2> static inline tag <ostream> operator<<(tag <ostream> os, pair<T1, T2> const& p){ return os.get()<<"{"<<p.first<<", "<<p.second<<"}", os;}
template <typename Other> static inline tag <ostream> operator<<(tag <ostream> os, Other const& o){ os.get()<<o; return os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, vector <T> const& v){ os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, set <T> const& s){ vector <T> v; for (auto i: s) v.push_back(i); os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }

vector<int> c;
vector<int> w;
vector<vector<int>> g;
vector<set<int>> col;
vector<set<int>> bcol;

ll ans;

int dfs(int idx, int par){
    int vidx = idx;
    int tvidx = idx;
    int bigi = -1;
    vector<int> cvidx;
    for(int i = 0; i < g[idx].size(); i++){
        if(g[idx][i] == par) continue;
        tvidx = dfs(g[idx][i], idx);
        cvidx.push_back(tvidx);
        if(col[tvidx].size() > col[vidx].size()){
            vidx = tvidx;
            bigi = cvidx.size() - 1;
        }
    }
    int bigc = -1;
    int ibigc = 0;
    for(int i = 0; i < cvidx.size(); i++){
        if(i == bigi) continue;
        for(int j : col[cvidx[i]]){
            if(col[vidx].count(j)){
                bcol[idx].insert(j);
                bigc = j;
            } else {
                col[vidx].insert(j);   
            }
        }
    }
    ibigc = bcol[idx].size();
    if(c[idx] == 0){
        if(ibigc > 1){
            ans += w[idx];
        }
        if(ibigc > 0){
            assert(bigc != -1);
            c[idx] = bigc;
        } else {
            if(col[vidx].size()){
                c[idx] = (*(col[vidx].begin()));
            }
        }
    } else {
        if(ibigc > 1 || (ibigc > 0 && c[idx] != bigc)){
            ans += w[idx];
        }
        col[vidx].insert(c[idx]);
    }
    return vidx;
}

void dfs2(int idx, int par, int ncol){
    if(c[idx] == 0){
        c[idx] = ncol;
    }
    for(int i : g[idx]){
        if(i == par) continue;
        dfs2(i, idx, c[idx]);
    }
}

void solve(){
    int n, k; 
    cin >> n >> k;
    c.assign(n + 1, 0);
    w.assign(n + 1, 0);
    
    g.assign(n + 1, vector<int>());
    col.assign(n + 1, set<int>());
    bcol.assign(n + 1, set<int>());
    ans = 0;

    for(int i = 1; i <= n; i++){
        cin >> w[i];
    }
    for(int i = 1; i <= n; i++){
        cin >> c[i];
    }

    int u,v;
    for(int i = 0; i < n - 1; i++){
        cin >> u >> v;
        g[u].push_back(v);
        g[v].push_back(u);
    }

    dfs(1, 0);
    dfs2(1, 0, 1);
    cout << ans << "\n";
    for(int i = 1; i <= n; i++){
        cout << c[i] << " ";
    }
    cout << "\n";
}

 
int32_t main(){
    BOOST;
 
    int q = 1; cin >> q;
    while(q--){
        solve();
    }
    return 0;
}
