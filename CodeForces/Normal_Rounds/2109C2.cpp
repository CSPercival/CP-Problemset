// This file was generated by Clank
#include<bits/stdc++.h>
#define st first
#define nd second
#define all(x) x.begin(), x.end()
#define BOOST cin.tie(NULL); ios_base::sync_with_stdio(false);
 
// #define int ll
typedef long long ll;

using namespace std;
template <typename T> struct tag:reference_wrapper <T>{ using reference_wrapper <T>::reference_wrapper; };
template <typename T1, typename T2> static inline tag <ostream> operator<<(tag <ostream> os, pair<T1, T2> const& p){ return os.get()<<"{"<<p.first<<", "<<p.second<<"}", os;}
template <typename Other> static inline tag <ostream> operator<<(tag <ostream> os, Other const& o){ os.get()<<o; return os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, vector <T> const& v){ os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, set <T> const& s){ vector <T> v; for (auto i: s) v.push_back(i); os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }

int add(ll y){
    cout << "add " << y << "\n";
    // cout << flush;
    cout.flush();
    int ans;
    cin >> ans;
    return ans;
}
int mul(ll y){
    cout << "mul " << y << "\n";
    // cout << flush;
    cout.flush();
    int ans;
    cin >> ans;
    return ans;
}
int div(ll y){
    cout << "div " << y << "\n";
    // cout << flush;
    cout.flush();
    int ans;
    cin >> ans;
    return ans;
}
int digit(){
    cout << "digit\n";
    // cout << flush;
    cout.flush();

    int ans;
    cin >> ans;
    return ans;
}
int finish(){
    cout << "!\n";
    cout.flush();
    int ans;
    cin >> ans;
    return ans;
}

void solve(){
    int n; 
    cin >> n;
    
    mul(9);
    digit();
    digit();
    add(n - 9);
    assert(finish() == 1);
}

 
int32_t main(){
    // BOOST;
 
    int q = 1; cin >> q;
    while(q--){
        solve();
    }
    return 0;
}
