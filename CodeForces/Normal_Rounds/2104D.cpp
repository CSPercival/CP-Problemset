// This file was generated by Clank
#include<bits/stdc++.h>
#define st first
#define nd second
#define all(x) x.begin(), x.end()
#define BOOST cin.tie(NULL); ios_base::sync_with_stdio(false);
 
#define int ll
typedef long long ll;

using namespace std;
template <typename T> struct tag:reference_wrapper <T>{ using reference_wrapper <T>::reference_wrapper; };
template <typename T1, typename T2> static inline tag <ostream> operator<<(tag <ostream> os, pair<T1, T2> const& p){ return os.get()<<"{"<<p.first<<", "<<p.second<<"}", os;}
template <typename Other> static inline tag <ostream> operator<<(tag <ostream> os, Other const& o){ os.get()<<o; return os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, vector <T> const& v){ os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, set <T> const& s){ vector <T> v; for (auto i: s) v.push_back(i); os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }

const int N = 6000010;
// const int N = 20;

int sito[N];
vector<int> prim;
vector<ll> pref;

void solve(){
    int n; cin >> n;
    vector<int> a(n);
    ll sum = 0;
    for(int i = 0; i < n; i++){
        cin >> a[i];
        sum += a[i];
    }
    sort(all(a));
    int ans = 0;
    // cout << "ok2" << endl;
    // cout << sum << " " << ans << endl;

    while(sum < pref[n - ans]){
        // cout << sum << " " << ans << endl;
        sum -= a[ans];
        ans++;
    }
    
    cout << ans << "\n";
    // cout << "ok3" << endl;
}

 
int32_t main(){
    BOOST;
    
    ll sum = 0;
    for(int i = 2; i < N; i++){
        if(!sito[i]){
            prim.push_back(i);
            sum += i;
            for(int j = i + i; j < N; j += i){
                sito[j] = 1;
            }
        }
    }
    // cout << "ok0" << endl;

    pref.assign(prim.size() + 1, 0);
    for(int i = 0; i < prim.size(); i++){
        pref[i + 1] = pref[i] + prim[i];
        // cout << pref[i + 1] << " ";
    }
    // cout << "\n";
    // cout << "ok1" << endl;
    // cout << pref << "\n";

    // cout << sum << " " << prim.size() << "\n";

    int q = 1; cin >> q;
    while(q--){
        solve();
    }
    return 0;
}
