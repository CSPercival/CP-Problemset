// This file was generated by Clank
#include<bits/stdc++.h>
#define st first
#define nd second
#define all(x) x.begin(), x.end()
#define BOOST cin.tie(NULL); ios_base::sync_with_stdio(false);
 
#define int ll
typedef long long ll;

using namespace std;
template <typename T> struct tag:reference_wrapper <T>{ using reference_wrapper <T>::reference_wrapper; };
template <typename T1, typename T2> static inline tag <ostream> operator<<(tag <ostream> os, pair<T1, T2> const& p){ return os.get()<<"{"<<p.first<<", "<<p.second<<"}", os;}
template <typename Other> static inline tag <ostream> operator<<(tag <ostream> os, Other const& o){ os.get()<<o; return os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, vector <T> const& v){ os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, set <T> const& s){ vector <T> v; for (auto i: s) v.push_back(i); os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }

int nob(int x){
    int ans = 0;
    while(x > 0){
        ans += (x&1);
        x >>= 1;
    }
    return ans;
}

int leading1(int x){
    int pot = 1;
    int ans = 0;
    while(pot <= x){
        if(x & pot) ans++;
        else ans = 0;
        pot <<= 1;
    }
    return ans;
}

void solve(){
    int n, q; 
    cin >> n >> q;
    vector<int> a(n + 1);
    vector<int> pre(n + 1);
    vector<int> pre2(n + 1);
    vector<int> pre3(n + 1);
    for(int i = 1; i <= n; i++){
        cin >> a[i];
        pre[i] = pre[i - 1] + log2(a[i]);
        pre2[i] = pre2[i - 1] + (popcount((uint32_t) a[i]) >= 2);
        pre3[i] = pre3[i - 1] + (popcount((uint32_t) a[i]) == 2 && a[i]&1);
    }

    int l,r;
    while(q--){
        cin >> l >> r;
        cout << pre[r] - pre[l - 1] + pre2[r] - pre2[l - 1] - ((pre3[r] - pre3[l - 1] + 1)/2) << "\n";
    }
}

 
int32_t main(){
    BOOST;
 
    int q = 1; cin >> q;
    while(q--){
        solve();
    }
    return 0;
}
