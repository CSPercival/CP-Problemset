// This file was generated by Clank
#include<bits/stdc++.h>
#define st first
#define nd second
#define all(x) x.begin(), x.end()
#define BOOST cin.tie(NULL); ios_base::sync_with_stdio(false);
 
#define int ll
typedef long long ll;

using namespace std;
template <typename T> struct tag:reference_wrapper <T>{ using reference_wrapper <T>::reference_wrapper; };
template <typename T1, typename T2> static inline tag <ostream> operator<<(tag <ostream> os, pair<T1, T2> const& p){ return os.get()<<"{"<<p.first<<", "<<p.second<<"}", os;}
template <typename Other> static inline tag <ostream> operator<<(tag <ostream> os, Other const& o){ os.get()<<o; return os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, vector <T> const& v){ os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, set <T> const& s){ vector <T> v; for (auto i: s) v.push_back(i); os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }

int dp[20][1100000];

int move(int mask, int idx){
    int part1 = mask & ((1 << idx) - 1);
    int part2 = (((mask - part1) >> (idx + 1)) << idx);
    return (part1 | part2);
}

void solve(){
    int n, m, k; cin >> n >> m;
    cin >> k;
    vector<int> idxs(k);
    for(int i = 0; i < k; i++){ 
        cin >> idxs[i];
        idxs[i]--;
    }
    if(m == 1){
        cout << "1\n";
        return;
    }
    // cout << "ok1" << endl;
    dp[0][0] = 0;
    dp[0][1] = 1;
    int mode = n&1;
    int tmpv;
    // cout << "ok2" << endl;
    for(int i = 1; i < n; i++, mode ^= 1){
    // cout << "ok3" << endl;
        for(int j = 0; j < (1 << (i + 1)); j++){
        // cout << "ok4" << endl;
            if(mode){
                dp[i][j] = 1;
            } else {
                dp[i][j] = 0;
            }
            for(int h = 0; h < k && idxs[h] <= i; h++){
            // cout << "ok5" << endl;
                tmpv = dp[i - 1][move(j,idxs[h])];
                if(mode){
                    dp[i][j] = min(dp[i][j], tmpv);
                } else {
                    dp[i][j] = max(dp[i][j], tmpv);
                }
            }
        }
    }
    int ansa = 0;
    int ansb = 0;
    for(int i = 0; i < (1 << n); i++){
        ansa += dp[n - 1][i] * 2;
        ansb += (1 - dp[n - 1][i]);
    }
    cout << ansa + ansb << endl;
}

 
int32_t main(){
    BOOST;
 
    int q = 1; cin >> q;
    while(q--){
        solve();
    }
    return 0;
}
