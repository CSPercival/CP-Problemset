// This file was generated by Clank
#include<bits/stdc++.h>
#define st first
#define nd second
#define all(x) x.begin(), x.end()
#define BOOST cin.tie(NULL); ios_base::sync_with_stdio(false);
 
// #define int ll
typedef long long ll;

using namespace std;
template <typename T> struct tag:reference_wrapper <T>{ using reference_wrapper <T>::reference_wrapper; };
template <typename T1, typename T2> static inline tag <ostream> operator<<(tag <ostream> os, pair<T1, T2> const& p){ return os.get()<<"{"<<p.first<<", "<<p.second<<"}", os;}
template <typename Other> static inline tag <ostream> operator<<(tag <ostream> os, Other const& o){ os.get()<<o; return os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, vector <T> const& v){ os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, set <T> const& s){ vector <T> v; for (auto i: s) v.push_back(i); os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }

int mod = 676767677;

int check_equality(vector<int> &a){
    for(int i = 0; i < a.size() - 1; i++){
        if(a[i] != a[i + 1]) return -1;
    }
    return a[0];
}

bool check_guess(vector<int> a, vector<int> &b){
    int n = a.size();
    int vis = 0;
    for(int i = 0; i < n; i++){
        a[i] -= vis;
        if(b[i] == 0){
            vis++;
        }
    }
    vis = 0;
    for(int i = n - 1; i >= 0; i--){
        a[i] -= vis;
        if(b[i] == 1){
            vis++;
        }
    }
    for(int i = 0; i < n; i++){
        if(a[i] != 1) return 0;
    }
    return 1;
}

bool check_correctness(vector<int> &a){
    int n = a.size();
    // int idx = 0;
    // for(int i = 0; i < n - 1; i++){
    //     if(a[i] != a[i + 1]){
    //         idx = i;
    //         break;
    //     }
    // }
    vector<int> b(n, -1);
    for(int i = 1; i < n; i++){
        if(abs(a[i - 1] - a[i]) > 1) return 0;
        if(a[i - 1] < a[i]){
            if(b[i - 1] == 1){
                return 0;
            }
            b[i] = 0;
            if(b[i - 1] == -1){
                b[i - 1] = 0;
                for(int j = i - 2; j >= 0; j--){
                    b[j] = b[j + 1]^1;
                }
            }
        } else if(a[i - 1] == a[i]){
            if(b[i - 1] != -1){
                b[i] = b[i - 1] ^ 1;
            }
        } else {
            if(b[i - 1] == 0){
                return 0;
            }
            b[i] = 1;
            if(b[i - 1] == -1){
                b[i - 1] = 1;
                for(int j = i - 2; j >= 0; j--){
                    b[j] = b[j + 1]^1;
                }
            }
        }
    }
    return check_guess(a, b);
    // vis = 0;
    // cout << b << "\n";
    
}

void solve(){
    int n; 
    cin >> n;
    vector<int> a(n);
    for(int i = 0; i < n; i++){
        cin >> a[i];
    }
    if(check_equality(a) != -1){
        int ansik = 0;
        vector<int> b(n, 0);
        for(int i = 0; i < n; i += 2) b[i] = 1;
        ansik += check_guess(a,b);
        for(int i = 0; i < n; i++) b[i] ^= 1;
        ansik += check_guess(a,b);
        cout << ansik << "\n";
        return;
    }
    // if(n&1){
    //     // int tmp = check_equality(a);
    //     if(check_equality(a) == (n + 1)/2){
    //         cout << "2\n";
    //     } else {
    //         cout << "0\n";
    //     }
    //     return;
    // }
    // if(check_equality(a) == (n + 1)/2){
    //     if(n&1){
    //         cout << "2\n";
    //     } else {
    //         cout << "1\n";
    //     }
    //     return;
    // }
    if(!check_correctness(a)){
        cout << "0\n";
        return;
    }
    reverse(all(a));
    if(!check_correctness(a)){
        cout << "0\n";
        return;
    }
    cout << "1\n";
}

 
int32_t main(){
    BOOST;
 
    int q = 1; cin >> q;
    while(q--){
        solve();
    }
    return 0;
}
