// This file was generated by Clank
#include<bits/stdc++.h>
#define st first
#define nd second
#define all(x) x.begin(), x.end()
#define BOOST cin.tie(NULL); ios_base::sync_with_stdio(false);
 
// #define int ll
typedef long long ll;

using namespace std;
template <typename T> struct tag:reference_wrapper <T>{ using reference_wrapper <T>::reference_wrapper; };
template <typename T1, typename T2> static inline tag <ostream> operator<<(tag <ostream> os, pair<T1, T2> const& p){ return os.get()<<"{"<<p.first<<", "<<p.second<<"}", os;}
template <typename Other> static inline tag <ostream> operator<<(tag <ostream> os, Other const& o){ os.get()<<o; return os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, vector <T> const& v){ os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, set <T> const& s){ vector <T> v; for (auto i: s) v.push_back(i); os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }

void ask(set<int> &A, vector<int> &ans){
    cout << "? " << A.size() << " ";
    for(auto it : A){
        cout << it << " ";
    }
    cout << "\n";
    cout.flush();
    int k;
    cin >> k;
    ans.resize(k);
    for(int i = 0; i < k; i++){
        cin >> ans[i];
    }
}

void answer(vector<int> &ans){
    cout << "! ";
    for(auto it : ans){
        cout << it << " ";
    }
    cout << "\n";
    cout.flush();
}

void solve(){
    int n; 
    cin >> n;
    set<int> A;
    for(int i = 1; i <= n * n + 1; i++) A.insert(i);
    vector<int> ans;
    vector<int> ans2;
    vector<pair<int,int>> dp(n * n + 2);
    vector<int> last_ans;
    last_ans.push_back(0);
    for(int i = 0; i < n && ans.size() <= n; i++){
        ask(A, ans);
        // ans2.push_back(ans.back());
        int idx = 0;
        for(int j : ans){
            A.erase(j);
            while(idx + 1 < last_ans.size() && last_ans[idx + 1] < j) idx++;
            dp[j] = {last_ans[idx], dp[last_ans[idx]].nd + 1};
        }
        last_ans = ans;
    }
    if(ans.size() > n){
        ans.resize(n + 1);
        answer(ans);
    } else {
        // ans2.push_back(*A.begin());
        int idx = 0;
        for(auto j : A){
            while(idx + 1 < last_ans.size() && last_ans[idx + 1] < j) idx++;
            dp[j] = {last_ans[idx], dp[last_ans[idx]].nd + 1};
        }
        int maxi = 0;
        idx = -1;
        for(int i = 1; i <= n * n + 1; i++){
            if(dp[i].nd > maxi){
                maxi = dp[i].nd;
                idx = i;
            }
        }
        while(idx != 0){
            ans2.push_back(idx);
            idx = dp[idx].st;
        }
        reverse(all(ans2));
        answer(ans2);
    }
}

 
int32_t main(){
    BOOST;
 
    int q = 1; cin >> q;
    while(q--){
        solve();
    }
    return 0;
}
