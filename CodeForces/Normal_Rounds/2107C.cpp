// This file was generated by Clank
#include<bits/stdc++.h>
#define st first
#define nd second
#define all(x) x.begin(), x.end()
#define BOOST cin.tie(NULL); ios_base::sync_with_stdio(false);
 
// #define int ll
typedef long long ll;

using namespace std;
template <typename T> struct tag:reference_wrapper <T>{ using reference_wrapper <T>::reference_wrapper; };
template <typename T1, typename T2> static inline tag <ostream> operator<<(tag <ostream> os, pair<T1, T2> const& p){ return os.get()<<"{"<<p.first<<", "<<p.second<<"}", os;}
template <typename Other> static inline tag <ostream> operator<<(tag <ostream> os, Other const& o){ os.get()<<o; return os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, vector <T> const& v){ os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, set <T> const& s){ vector <T> v; for (auto i: s) v.push_back(i); os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }


void solve(){
    int n; 
    ll k;
    cin >> n >> k;
    string rem; cin >> rem;
    vector<ll> a(n);
    int last0 = -1;
    for(int i = 0; i < n; i++){
        cin >> a[i];
        if(rem[i] == '0'){
            a[i] = -1e13;
            last0 = i;
        }
    }
    ll sum = 0;
    ll ans = 0;
    for(int i = 0; i < n; i++){
        sum += a[i];
        if(sum < 0){
            sum = 0;
        }
        ans = max(ans, sum);
    }
    if(last0 == -1){
        if(ans == k){
            cout << "Yes\n";
            for(int i = 0; i < n; i++){
                cout << a[i] << " ";
            }
            cout << "\n";
        } else {
            cout << "No\n";
        }
        return;
    }
    if(ans > k){
        cout << "No\n";
        return; 
    }
    
    ll leftmax = 0;
    sum = 0;
    for(int i = last0 - 1; i >= 0; i--){
        sum += a[i];
        leftmax = max(sum, leftmax);
        // if(sum < 0) sum = 0;
    }
    ll rightmax = 0;
    sum = 0;
    for(int i = last0 + 1; i < n; i++){
        sum += a[i];
        rightmax = max(sum, rightmax);
    }
    a[last0] = k - rightmax - leftmax;
    cout << "Yes\n";
    for(int i = 0; i < n; i++){
        cout << a[i] << " ";
    }
    cout << "\n";
}

 
int32_t main(){
    BOOST;
 
    int q = 1; cin >> q;
    while(q--){
        solve();
    }
    return 0;
}
