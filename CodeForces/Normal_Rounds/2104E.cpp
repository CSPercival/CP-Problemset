// This file was generated by Clank
#include<bits/stdc++.h>
#define st first
#define nd second
#define all(x) x.begin(), x.end()
#define BOOST cin.tie(NULL); ios_base::sync_with_stdio(false);
 
#define int ll
typedef long long ll;

using namespace std;
template <typename T> struct tag:reference_wrapper <T>{ using reference_wrapper <T>::reference_wrapper; };
template <typename T1, typename T2> static inline tag <ostream> operator<<(tag <ostream> os, pair<T1, T2> const& p){ return os.get()<<"{"<<p.first<<", "<<p.second<<"}", os;}
template <typename Other> static inline tag <ostream> operator<<(tag <ostream> os, Other const& o){ os.get()<<o; return os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, vector <T> const& v){ os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, set <T> const& s){ vector <T> v; for (auto i: s) v.push_back(i); os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }

int n, k;
string text;
vector<vector<int>> nxt;
vector<int> unpl;

void solve(){
    string qi; cin >> qi;
    int curr = 0;
    for(int i = 0; i < qi.size() && curr < n; i++){
        curr = nxt[curr][qi[i] - 'a'];
    }
    cout << unpl[curr] << "\n";
}

void preprocess(){
    vector<int> last(k, n);
    unpl[n] = 0;
    int mini;
    for(int i = n - 1; i >= 0; i--){
        nxt[i] = last;
        last[text[i] - 'a'] = i;
        mini = unpl[i];
        for(int j = 0; j < k; j++){
            mini = min(mini, unpl[nxt[i][j]] + 1);
        }
        unpl[i] = mini;
    }
}
 
int32_t main(){
    BOOST;

    cin >> n >> k;
    cin >> text;
    text = "$" + text;
    n++;
    nxt.assign(n + 1, vector<int>(k, n));
    unpl.assign(n + 1, 2 * n);
    preprocess();
    // cout << nxt << "\n";
    // cout << unpl << "\n";

    int q = 1; cin >> q;
    while(q--){
        solve();
    }
    return 0;
}
