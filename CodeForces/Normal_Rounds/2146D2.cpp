// This file was generated by Clank
#include<bits/stdc++.h>
#define st first
#define nd second
#define all(x) x.begin(), x.end()
#define BOOST cin.tie(NULL); ios_base::sync_with_stdio(false);
 
#define int ll
typedef long long ll;

using namespace std;
template <typename T> struct tag:reference_wrapper <T>{ using reference_wrapper <T>::reference_wrapper; };
template <typename T1, typename T2> static inline tag <ostream> operator<<(tag <ostream> os, pair<T1, T2> const& p){ return os.get()<<"{"<<p.first<<", "<<p.second<<"}", os;}
template <typename Other> static inline tag <ostream> operator<<(tag <ostream> os, Other const& o){ os.get()<<o; return os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, vector <T> const& v){ os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, set <T> const& s){ vector <T> v; for (auto i: s) v.push_back(i); os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }

void go(int l, int r, map<int,int> &a, int shift){
    if(r < l) return;
    if(l == r){
        a[l ^ shift] = r ^ shift;
        return;
    }
    // cout << l << " " << r << endl;
    int pot = 1;
    while(pot <= r) pot <<= 1;
    pot >>= 1;
    // cout << "ok1 " << pot << endl;
    if(pot < l){
        go(l ^ pot, r ^ pot, a, shift ^ pot);
        return;
    }
    // int last_done = r + 1;
    // int tmp_last_done;
    
    // while(pot >= 1){
    int lptr, rptr;
    for(lptr = pot - 1, rptr = pot; l <= lptr && rptr <= r; rptr++, lptr--){
        // cout << lptr << " - " << rptr << "    " << l << " - " << r << endl;
        a[rptr | shift] = lptr | shift;
        a[lptr | shift] = rptr | shift;
    }
    // cout << "ok2 " << lptr << " " << rptr << endl;
    if(r < rptr){
        go(l, lptr, a, shift);
        return;
    }
    if(lptr < l){
        go(rptr ^ pot, r ^ pot, a, shift ^ pot);
        return;
    }
}

void solve(){
    int l,r; 
    cin >> l >> r;
    // int n = r - l + 1;
    // vector<int> a(r + 1 -l);
    map<int,int> a;

    go(l, r, a, 0);
    ll ans = 0;

    for(int i = l; i <= r; i++){
        ans += a[i] | i;
    }

    cout << ans << "\n";
    for(int i = l; i <= r; i++){
        cout << a[i] << " ";
    }
    cout << "\n";
}

 
int32_t main(){
    BOOST;
 
    int q = 1; cin >> q;
    while(q--){
        solve();
    }
    return 0;
}
