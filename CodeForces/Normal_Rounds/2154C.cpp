// This file was generated by Clank
#include<bits/stdc++.h>
#define st first
#define nd second
#define all(x) x.begin(), x.end()
#define BOOST cin.tie(NULL); ios_base::sync_with_stdio(false);
 
// #define int ll
typedef long long ll;

using namespace std;
template <typename T> struct tag:reference_wrapper <T>{ using reference_wrapper <T>::reference_wrapper; };
template <typename T1, typename T2> static inline tag <ostream> operator<<(tag <ostream> os, pair<T1, T2> const& p){ return os.get()<<"{"<<p.first<<", "<<p.second<<"}", os;}
template <typename Other> static inline tag <ostream> operator<<(tag <ostream> os, Other const& o){ os.get()<<o; return os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, vector <T> const& v){ os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, set <T> const& s){ vector <T> v; for (auto i: s) v.push_back(i); os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }


vector<int> primes;

void solve(){
    int n; 
    cin >> n;
    vector<int> a(n);
    vector<int> ca(n);
    vector<pair<int,int>> b(n);
    for(int i = 0; i < n; i++){
        cin >> a[i];
        ca[i] = a[i];
    }
    for(int i = 0; i < n; i++){
        cin >> b[i].st;
        b[i].nd = i;
    }

    vector<int> cost(2e5 + 1, -1); 
    vector<pair<int,int>> options;

    for(int i = 0; i < n; i++){
        for(int div = 2; div * div <= a[i]; div++){
            if(a[i] % div == 0){
                if(cost[div] != -1){
                    cout << "0\n";
                    return;
                }
                cost[div] = i;
                options.push_back({div, i});
                // cost[div].push_back({i,0});
                while(a[i] % div == 0) a[i] /= div;
            }
        }
        if(a[i] > 1){
            if(cost[a[i]] != -1){
                cout << "0\n";
                return;
            }
            options.push_back({a[i], i});
            cost[a[i]] = i;
        }
    }
    // for(int i = 0; i < 2e3; i++){
    //     if(cost[i].size() >= 2){
    //         cout << "0\n";
    //         return;
    //     }
    // }
    a = ca;
    int ans = 2e9;

    for(int i = 0; i < n; i++){
        a[i]++;
        for(int div = 2; div * div <= a[i]; div++){
            if(a[i] % div == 0){
                if(cost[div] != -1){
                    ans = min(ans, b[i].st);
                }
                while(a[i] % div == 0) a[i] /= div;
            }
        }
        if(a[i] > 1){
            // cost[a[i]].push_back({i,0});
            if(cost[a[i]] != -1){
                ans = min(ans, b[i].st);
            }
        }
    }
    
    sort(all(b));
    ans = min(ans, b[0].st + b[1].st);
    int ax = ca[b[0].nd], cax;
    for(auto i : options){
        if(i.nd != b[0].nd){
            int tmp = (i.st - (ax % i.st));
            if(tmp <= ans / b[0].st)
                ans = min(ans, (i.st - (ax % i.st)) * b[0].st);
        }
    }
    cout << ans << "\n";
}

 
int32_t main(){
    BOOST;
    
 
    int q = 1; cin >> q;
    while(q--){
        solve();
    }
    return 0;
}
