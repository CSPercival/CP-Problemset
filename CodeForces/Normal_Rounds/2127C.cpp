// This file was generated by Clank
#include<bits/stdc++.h>
#define st first
#define nd second
#define all(x) x.begin(), x.end()
#define BOOST cin.tie(NULL); ios_base::sync_with_stdio(false);
 
#define int ll
typedef long long ll;

using namespace std;
template <typename T> struct tag:reference_wrapper <T>{ using reference_wrapper <T>::reference_wrapper; };
template <typename T1, typename T2> static inline tag <ostream> operator<<(tag <ostream> os, pair<T1, T2> const& p){ return os.get()<<"{"<<p.first<<", "<<p.second<<"}", os;}
template <typename Other> static inline tag <ostream> operator<<(tag <ostream> os, Other const& o){ os.get()<<o; return os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, vector <T> const& v){ os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, set <T> const& s){ vector <T> v; for (auto i: s) v.push_back(i); os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }


void solve(){
    int n, k; 
    cin >> n >> k;
    vector<pair<int,int>> a(n);
    int x,y;
    for(int i = 0; i < n; i++){
        cin >> a[i].st;
    }
    for(int i = 0; i < n; i++){
        cin >> y;
        x = a[i].st;
        // cin >> a[i].st >> a[i].nd;
        a[i].st = min(x,y);
        a[i].nd = max(x,y);
    }
    sort(all(a));
    int optimal = 0;
    // cout << a << "\n";
    for(int i = 1; i < n; i++){
        if(a[i - 1].nd >= a[i].st){
            optimal = 1;
            break;
        }
    }
    ll ans = 0;
    for(int i = 0; i < n; i++){
        ans += abs(a[i].nd - a[i].st);
    }
    if(optimal){
        cout << ans << "\n";
        return;
    }
    // cout << "gowno\n";
    int mindiff = 1e9;
    for(int i = 1; i < n; i++){
        mindiff = min(mindiff, a[i].st - a[i - 1].nd);
    }
    cout << ans + 2 * mindiff << "\n";
}

 
int32_t main(){
    BOOST;
 
    int q = 1; cin >> q;
    while(q--){
        solve();
    }
    return 0;
}
