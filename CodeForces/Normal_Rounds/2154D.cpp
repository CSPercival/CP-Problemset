// This file was generated by Clank
#include<bits/stdc++.h>
#define st first
#define nd second
#define all(x) x.begin(), x.end()
#define BOOST cin.tie(NULL); ios_base::sync_with_stdio(false);
 
// #define int ll
typedef long long ll;

using namespace std;
template <typename T> struct tag:reference_wrapper <T>{ using reference_wrapper <T>::reference_wrapper; };
template <typename T1, typename T2> static inline tag <ostream> operator<<(tag <ostream> os, pair<T1, T2> const& p){ return os.get()<<"{"<<p.first<<", "<<p.second<<"}", os;}
template <typename Other> static inline tag <ostream> operator<<(tag <ostream> os, Other const& o){ os.get()<<o; return os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, vector <T> const& v){ os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, set <T> const& s){ vector <T> v; for (auto i: s) v.push_back(i); os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }

void dfs(vector<int> &vis, vector<vector<int>> &g, int idx, int par){
    // cout << idx << " xd\n";
    for(int i : g[idx]){
        if(i == par) 
            continue;
        vis[i] = vis[idx] + 1;
        dfs(vis, g, i, idx);
    }
}

void solve(){
    int n; 
    cin >> n;
    vector<vector<int>> g(n + 1);
    // vector<int> par(n + 1);
    vector<int> d(n + 1, 0);
    vector<int> catdist(n + 1, -1);
    catdist[1] = 0;
    int u, v;
    for(int i = 0; i < n - 1; i++){
        cin >> u >> v;
        d[u]++;
        d[v]++;
        g[u].push_back(v);
        g[v].push_back(u);
    }
    dfs(catdist, g, 1, 0);
    vector<pair<int,int>> ans;
    queue<int> q;
    for(int i = 1; i < n; i++){
        if(d[i] == 1){
            q.push(i);
        }
    }
    int idx;
    int mode = 0;
    // ans.push_back({1, -1});
    // cout << catdist << "\n";
    while(q.size()){
        idx = q.front();
        q.pop();
        if((catdist[idx] % 2) == mode){
            ans.push_back({1, -1});
            mode ^= 1;
        }
        ans.push_back({2, idx});
        for(int i : g[idx]){
            d[i]--;
            if(d[i] == 1 && i != n){
                q.push(i);
            }
        }
        d[idx] = 0;
        ans.push_back({1, -1});
        mode ^= 1;
    }
    cout << ans.size() << "\n";
    for(auto i : ans){
        cout << i.st;
        if(i.st != 1){
            cout << " " << i.nd;
        }
        cout << "\n";
    }
}

 
int32_t main(){
    BOOST;
 
    int q = 1; cin >> q;
    while(q--){
        solve();
    }
    return 0;
}
