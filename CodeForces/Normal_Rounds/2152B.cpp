// This file was generated by Clank
#include<bits/stdc++.h>
#define st first
#define nd second
#define all(x) x.begin(), x.end()
#define BOOST cin.tie(NULL); ios_base::sync_with_stdio(false);
 
// #define int ll
typedef long long ll;

using namespace std;
template <typename T> struct tag:reference_wrapper <T>{ using reference_wrapper <T>::reference_wrapper; };
template <typename T1, typename T2> static inline tag <ostream> operator<<(tag <ostream> os, pair<T1, T2> const& p){ return os.get()<<"{"<<p.first<<", "<<p.second<<"}", os;}
template <typename Other> static inline tag <ostream> operator<<(tag <ostream> os, Other const& o){ os.get()<<o; return os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, vector <T> const& v){ os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, set <T> const& s){ vector <T> v; for (auto i: s) v.push_back(i); os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }

int go_all(int n, pair<int,int> k, pair<int,int> d);

int stay(pair<int,int> k, pair<int,int> d){
    int xdiv = abs(k.st - d.st);
    int ydiv = abs(k.nd - d.nd);
    return max(xdiv, ydiv);
}

int up(int n, pair<int,int> k, pair<int,int> d){
    int tans = 0;
    if(k.st > d.st || k.st == 0) return stay(k,d);
    if(k.st == d.st){
        return abs(k.nd - d.nd);
    }
    tans = k.st;
    k.st = 0;
    d.st -= tans;
    if(k.nd < d.nd){
        d.nd = max(k.nd, d.nd - tans);
        return tans + go_all(n, k, d);
    } else {
        d.nd = min(k.nd, d.nd + tans);
        return tans + go_all(n, k, d);
    }
}
int down(int n, pair<int,int> k, pair<int,int> d){
    int tans = 0;
    if(k.st < d.st || k.st == n) return stay(k,d);
    if(k.st == d.st){
        return abs(k.nd - d.nd);
    }
    tans = n - k.st;
    k.st = n;
    d.st += tans;
    if(k.nd < d.nd){
        d.nd = max(k.nd, d.nd - tans);
        return tans + go_all(n, k, d);
    } else {
        d.nd = min(k.nd, d.nd + tans);
        return tans + go_all(n, k, d);
    }
}
int left(int n, pair<int,int> k, pair<int,int> d){
    int tans = 0;
    if(k.nd > d.nd || k.nd == 0) return stay(k,d);
    if(k.nd == d.nd){
        return abs(k.st - d.st);
    }
    tans = k.nd;
    k.nd = 0;
    d.nd -= tans;
    if(k.st < d.st){
        d.st = max(k.st, d.st - tans);
        return tans + go_all(n, k, d);
    } else {
        d.st = min(k.st, d.st + tans);
        return tans + go_all(n, k, d);
    }
}
int right(int n, pair<int,int> k, pair<int,int> d){
    int tans = 0;
    if(k.nd < d.nd || k.nd == n) return stay(k,d);
    if(k.nd == d.nd){
        return abs(k.st - d.st);
    }
    tans = n - k.nd;
    k.nd = n;
    d.nd += tans;
    if(k.st < d.st){
        d.st = max(k.st, d.st - tans);
        return tans + go_all(n, k, d);
    } else {
        d.st = min(k.st, d.st + tans);
        return tans + go_all(n, k, d);
    }
}

int go_all(int n, pair<int,int> k, pair<int,int> d){
    // int ans = 0;
    // int tmp;
    // cout << k << " " << d << "\n";
    // cout << "go up:\n";
    // tmp = up(n, k, d);
    // ans = max(tmp,ans);
    // cout << tmp << "\n";

    // cout << "go down:\n";
    // tmp = down(n, k, d);
    // ans = max(tmp,ans);
    // cout << tmp << "\n";

    // cout << "go left:\n";
    // tmp = left(n, k, d);
    // ans = max(tmp,ans);
    // cout << tmp << "\n";

    // cout << "go right:\n";
    // tmp = right(n, k, d);
    // ans = max(tmp,ans);
    // cout << tmp << "\n";
    // return ans;
    return max({up(n, k, d), down(n, k, d), right(n, k, d), left(n, k, d)});
}

void solve(){
    int n;
    cin >> n;
    pair<int,int> k,d;
    cin >> k.st >> k.nd >> d.st >> d.nd;
    // int xdiv = abs(k.st - d.st);
    // int ydiv = abs(k.nd - d.nd);
    // cout << max(xdiv, ydiv) << "\n";
    ll ans = 0;
    // cout << up(n, k, d) << "\n";
    // cout << down(n, k, d) << "\n";
    // cout << left(n, k, d) << "\n";
    // cout << right(n, k, d) << "\n";
    ans = go_all(n, k, d);
    cout << ans << "\n";
}

 
int32_t main(){
    BOOST;
 
    int q = 1; cin >> q;
    while(q--){
        solve();
    }
    return 0;
}
