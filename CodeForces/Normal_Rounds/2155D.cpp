// This file was generated by Clank
#include<bits/stdc++.h>
#define st first
#define nd second
#define all(x) x.begin(), x.end()
#define BOOST cin.tie(NULL); ios_base::sync_with_stdio(false);
 
// #define int ll
typedef long long ll;

using namespace std;
template <typename T> struct tag:reference_wrapper <T>{ using reference_wrapper <T>::reference_wrapper; };
template <typename T1, typename T2> static inline tag <ostream> operator<<(tag <ostream> os, pair<T1, T2> const& p){ return os.get()<<"{"<<p.first<<", "<<p.second<<"}", os;}
template <typename Other> static inline tag <ostream> operator<<(tag <ostream> os, Other const& o){ os.get()<<o; return os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, vector <T> const& v){ os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, set <T> const& s){ vector <T> v; for (auto i: s) v.push_back(i); os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }

int ask(int a, int b){
    cout << a << " " << b << "\n";
    cout.flush();
    int ans; cin >> ans;
    return ans;
}

int merge(int idx1, int idx2, vector<vector<int>> &s){
    for(int i = 0; i < s[idx1].size(); i++){
        for(int j = 0; j < s[idx2].size(); j++){
            if(ask(s[idx1][i],s[idx2][j])) return 1;
        }
    }
    for(int i = 0; i < s[idx2].size(); i++){
        s[idx1].push_back(s[idx2][i]);
    }
    return 0;
}

void solve(){
    int n; 
    cin >> n;
    vector<vector<int>> s(n + 1);
    set<int> alive;
    for(int i = 1; i <= n; i++){
        s[i].push_back(i);
        alive.insert(i);
    }
    vector<int> dead;
    int idx1, idx2;
    while(alive.size()){
        // dead.clear();
        for(auto it = alive.begin(); it != alive.end(); it++){
            idx1 = *it;
            it++;
            if(it == alive.end()) break;
            idx2 = *it;
            if(merge(idx1, idx2, s)){
                return;
            }
            dead.push_back(idx2);
        }
        for(int i : dead){
            alive.erase(i);
        }
        dead.clear();
    }
}

 
int32_t main(){
    // BOOST;
 
    int q = 1; cin >> q;
    while(q--){
        solve();
    }
    return 0;
}
