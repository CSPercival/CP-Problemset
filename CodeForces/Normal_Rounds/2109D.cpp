// This file was generated by Clank
#include<bits/stdc++.h>
#define st first
#define nd second
#define all(x) x.begin(), x.end()
#define BOOST cin.tie(NULL); ios_base::sync_with_stdio(false);
 
// #define int ll
typedef long long ll;

using namespace std;
template <typename T> struct tag:reference_wrapper <T>{ using reference_wrapper <T>::reference_wrapper; };
template <typename T1, typename T2> static inline tag <ostream> operator<<(tag <ostream> os, pair<T1, T2> const& p){ return os.get()<<"{"<<p.first<<", "<<p.second<<"}", os;}
template <typename Other> static inline tag <ostream> operator<<(tag <ostream> os, Other const& o){ os.get()<<o; return os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, vector <T> const& v){ os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, set <T> const& s){ vector <T> v; for (auto i: s) v.push_back(i); os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }

void bfs(int start, vector<int> &dist, vector<vector<int>> &g, int ebit){
    priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;
    pq.push({dist[start], start});
    pair<int,int> tmpp;
    int cebit;
    while(pq.size()){
        tmpp = pq.top();
        pq.pop();
        // cout << tmpp.st << " " << tmpp.nd << " " << dist[tmpp.nd] << endl;
        if(dist[tmpp.nd] < tmpp.st) continue;
        // cebit = (tmpp.nd & ebit) ^ ebit;
        for(int v : g[tmpp.nd]){
            if(dist[v] > tmpp.st + 1){
                dist[v] = tmpp.st + 1;
                pq.push({tmpp.st + 1, v});
            }
        }
    }
}

void solve(){
    int n, m, l; 
    cin >> n >> m >> l;
    int sumA = 0;
    int sumP = 0;
    int sumNP = 0;
    int minNP = 2e9 + 10;

    int ebit = 1;
    while(ebit <= n) ebit <<= 1;
    vector<vector<int>> g((n ^ ebit) + 1);
    vector<int> a(l);
    for(int i = 0; i < l; i++){
        cin >> a[i];
        sumA += a[i];
        if(a[i]&1){
            minNP = min(minNP, a[i]);
        }
    }
    if(sumA&1){
        sumP = sumA - minNP;
        sumNP = sumA;
    } else {
        sumNP = sumA - minNP;
        sumP = sumA;
    }

    int u,v;
    for(int i = 0; i < m; i++){
        cin >> u >> v;
        g[u].push_back(v ^ ebit);
        g[u ^ ebit].push_back(v);
        g[v].push_back(u ^ ebit);
        g[v ^ ebit].push_back(u);
    }

    vector<int> dist((n ^ ebit) + 1, 2e9 + 10);
    dist[1] = 0;
    // cout << "BEFORE bFS" << endl;
    bfs(1, dist, g, ebit);
    // cout << "after bFS" << endl;

    for(int i = 1; i <= n; i++){
        if(sumP >= dist[i] || sumNP >= dist[i ^ ebit]){
            cout << "1";
        } else {
            cout << "0";
        }
    }    
    cout << "\n";
}

 
int32_t main(){
    BOOST;
 
    int q = 1; cin >> q;
    while(q--){
        solve();
    }
    return 0;
}
