// This file was generated by Clank
#include<bits/stdc++.h>
#define st first
#define nd second
#define all(x) x.begin(), x.end()
#define BOOST cin.tie(NULL); ios_base::sync_with_stdio(false);
 
// #define int ll
typedef long long ll;

using namespace std;
template <typename T> struct tag:reference_wrapper <T>{ using reference_wrapper <T>::reference_wrapper; };
template <typename T1, typename T2> static inline tag <ostream> operator<<(tag <ostream> os, pair<T1, T2> const& p){ return os.get()<<"{"<<p.first<<", "<<p.second<<"}", os;}
template <typename Other> static inline tag <ostream> operator<<(tag <ostream> os, Other const& o){ os.get()<<o; return os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, vector <T> const& v){ os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, set <T> const& s){ vector <T> v; for (auto i: s) v.push_back(i); os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }

const int N = 30;
const int K = 435;

pair<int,int> zp = {-1, -1};
pair<int,int> dp[100][2000];
vector<pair<int,int>> nom;

void print_any(vector<int> &a, int n){
    vector<int> per(n);
    a.push_back(0);
    for(int i = 0; i < n; i++){
        per[i] = i + 1;
    }
    // int lastgood = -1;
    int ones = -1;
    for(int i = 0; i < n; i++){
        if(a[i]){
            if(ones == -1){
                ones = i;
            }
        } else {
            if(ones != -1){
                per[ones] = i + 1;
                for(int j = ones + 1; j <= i; j++){
                    per[j] = per[j - 1] - 1;
                }
                ones = -1;
            }
        }
    }
    for(int i = 0; i < n; i++){
        cout << per[i] << " ";
    }
    cout << "\n";
    a.pop_back();
}

void find_a(vector<int> &a, int n, int k){
    pair<int,int> curr = {n, k}, tzp = {0, 0};
    int ptr = 0;
    while(curr != tzp){
        int tmp = curr.st - dp[curr.st][curr.nd].st;
        for(int i = 0; i < tmp - 1; i++){
            a[i + ptr] = 0;
        }
        ptr += tmp;
        curr = dp[curr.st][curr.nd];
    }
}

void solve(){
    int n, k; 
    cin >> n >> k; 
    k = n * (n - 1) / 2 - k;
    if(dp[n][k] == zp){
        cout << "0\n";
        return;
    }
    vector<int> a(n - 1, 1);
    find_a(a, n, k);
    print_any(a, n);
}


void f2(){
    for(int i = 0; i <= N; i++){
        for(int j = 0; j <= K; j++){
            dp[i][j] = zp;
        }
    }
    dp[0][0] = {0, 0};
    for(int i = 0; i < N; i++){
        for(int j = 0; j < K; j++){
            if(dp[i][j] == zp) continue;
            for(auto h : nom){
                dp[i + h.nd][j + h.st] = {i, j};
            }
        }
    }
}

int32_t main(){
    BOOST;
    int sum = 0;
    for(int i = 1; i <= 30; i++){
        nom.push_back({sum, i});
        sum += i;
    }
    f2();
 
    int q = 1; cin >> q;
    while(q--){
        solve();
    }
    return 0;
}
