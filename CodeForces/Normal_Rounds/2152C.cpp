// This file was generated by Clank
#include<bits/stdc++.h>
#define st first
#define nd second
#define all(x) x.begin(), x.end()
#define BOOST cin.tie(NULL); ios_base::sync_with_stdio(false);
 
// #define int ll
typedef long long ll;

using namespace std;
template <typename T> struct tag:reference_wrapper <T>{ using reference_wrapper <T>::reference_wrapper; };
template <typename T1, typename T2> static inline tag <ostream> operator<<(tag <ostream> os, pair<T1, T2> const& p){ return os.get()<<"{"<<p.first<<", "<<p.second<<"}", os;}
template <typename Other> static inline tag <ostream> operator<<(tag <ostream> os, Other const& o){ os.get()<<o; return os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, vector <T> const& v){ os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, set <T> const& s){ vector <T> v; for (auto i: s) v.push_back(i); os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }


void solve(){
    int n, q; 
    cin >> n >> q;
    vector<int> a(n + 1);
    vector<int> pre1(n + 1);
    vector<int> pres(n + 1);    
    a[0] = -1;
    for(int i = 1; i <= n; i++){
        cin >> a[i];
        pre1[i] = pre1[i - 1] + a[i];
        pres[i] = pres[i - 1] + (a[i] == a[i - 1]);
    }

    int l,r;
    while(q--){
        cin >> l >> r;
        if((pre1[r] - pre1[l - 1]) % 3 != 0 || (r - l + 1) % 3 != 0){
            cout << "-1\n";
            continue;
        }
        if(pres[r] - pres[l] != 0){
            cout << (r - l + 1)/3 << "\n";
        } else {
            cout << (r - l + 1)/3 + 1 << "\n";
        }
    }
}

 
int32_t main(){
    BOOST;
 
    int q = 1; cin >> q;
    while(q--){
        solve();
    }
    return 0;
}
