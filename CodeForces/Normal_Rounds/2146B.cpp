// This file was generated by Clank
#include<bits/stdc++.h>
#define st first
#define nd second
#define all(x) x.begin(), x.end()
#define BOOST cin.tie(NULL); ios_base::sync_with_stdio(false);
 
// #define int ll
typedef long long ll;

using namespace std;
template <typename T> struct tag:reference_wrapper <T>{ using reference_wrapper <T>::reference_wrapper; };
template <typename T1, typename T2> static inline tag <ostream> operator<<(tag <ostream> os, pair<T1, T2> const& p){ return os.get()<<"{"<<p.first<<", "<<p.second<<"}", os;}
template <typename Other> static inline tag <ostream> operator<<(tag <ostream> os, Other const& o){ os.get()<<o; return os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, vector <T> const& v){ os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, set <T> const& s){ vector <T> v; for (auto i: s) v.push_back(i); os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }


void solve(){
    int n, m; 
    cin >> n >> m;
    vector<int> a(n);
    vector<int> hmp(m + 1, 0);
    vector<int> last(m + 1, -1);
    int ss;
    vector<vector<int>> mys(n);
    for(int i = 0; i < n; i++){
        cin >> ss;
        mys[i].resize(ss);
        for(int j = 0; j < ss; j++){
            cin >> mys[i][j];
            hmp[mys[i][j]]++;
            last[mys[i][j]] = i;
        }
    }
    vector<int> obl(n, 0);
    int freectr = n;
    for(int i = 1; i <= m; i++){
        if(hmp[i] == 0){
            cout << "NO\n";
            return;
        }
        if(hmp[i] == 1){
            if(obl[last[i]] == 0){
                obl[last[i]] = 1;
                freectr--;
            }
        }
    }
    if(freectr >= 2){
        cout << "YES\n";
    } else {
        cout << "NO\n";
    }

}

 
int32_t main(){
    BOOST;
 
    int q = 1; cin >> q;
    while(q--){
        solve();
    }
    return 0;
}
