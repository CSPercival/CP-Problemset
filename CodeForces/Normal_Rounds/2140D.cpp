// This file was generated by Clank
#include<bits/stdc++.h>
#define st first
#define nd second
#define all(x) x.begin(), x.end()
#define BOOST cin.tie(NULL); ios_base::sync_with_stdio(false);
 
#define int ll
typedef long long ll;

using namespace std;
template <typename T> struct tag:reference_wrapper <T>{ using reference_wrapper <T>::reference_wrapper; };
template <typename T1, typename T2> static inline tag <ostream> operator<<(tag <ostream> os, pair<T1, T2> const& p){ return os.get()<<"{"<<p.first<<", "<<p.second<<"}", os;}
template <typename Other> static inline tag <ostream> operator<<(tag <ostream> os, Other const& o){ os.get()<<o; return os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, vector <T> const& v){ os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, set <T> const& s){ vector <T> v; for (auto i: s) v.push_back(i); os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }


void solve(){
    int n; cin >> n;
    vector<pair<int,int>> seg(n);
    ll ans = 0, tans = 0;
    vector<pair<int,int>> sums(n);
    for(int i = 0; i < n; i++){
        cin >> seg[i].st >> seg[i].nd;
        ans += seg[i].nd - seg[i].st;
        tans += seg[i].nd;
        sums[i] = {seg[i].st + seg[i].nd, i};
    }
    sort(all(sums));
    for(int i = 0; i < n/2; i++){
        tans -= sums[i].st;
    }
    if(n&1){
        tans -= seg[sums[n - 1].nd].nd;
        ll mtans = tans;
        for(int i = n - 2; i >= n/2; i--){
            tans += seg[sums[i + 1].nd].nd;
            tans -= seg[sums[i].nd].nd;
            mtans = max(mtans, tans);
        }
        for(int i = n/2 - 1; i >= 0; i--){
            tans += seg[sums[i + 1].nd].nd;
            tans -= sums[i + 1].st;
            tans += sums[i].st;
            tans -= seg[sums[i].nd].nd;
            mtans = max(mtans, tans);
        }
        tans = mtans;
    }
    cout << ans + tans << "\n";
}

 
int32_t main(){
    BOOST;
 
    int q = 1; cin >> q;
    while(q--){
        solve();
    }
    return 0;
}
