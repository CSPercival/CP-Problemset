// This file was generated by Clank
#include<bits/stdc++.h>
#define st first
#define nd second
#define all(x) x.begin(), x.end()
#define BOOST cin.tie(NULL); ios_base::sync_with_stdio(false);
 
#define int ll
typedef long long ll;

using namespace std;
template <typename T> struct tag:reference_wrapper <T>{ using reference_wrapper <T>::reference_wrapper; };
template <typename T1, typename T2> static inline tag <ostream> operator<<(tag <ostream> os, pair<T1, T2> const& p){ return os.get()<<"{"<<p.first<<", "<<p.second<<"}", os;}
template <typename Other> static inline tag <ostream> operator<<(tag <ostream> os, Other const& o){ os.get()<<o; return os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, vector <T> const& v){ os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }
template <typename T> static inline tag <ostream> operator <<(tag <ostream> os, set <T> const& s){ vector <T> v; for (auto i: s) v.push_back(i); os.get()<<"["; for (int i=0; i<v.size(); i++) if (i!=v.size()-1) os.get()<<v[i]<<", "; else os.get()<<v[i]; return os.get()<<"]", os; }

int bnsrch(vector<int> &v, int po, int ko, int val){
    int sr;
    while(po + 1 < ko){
        sr = (po + ko) / 2;
        if(val <= v[sr]){
            ko = sr;
        } else {
            po = sr;
        }
    }
    return po;
}

void solve(){
    int n; 
    cin >> n;
    vector<int> a(n);
    for(int i = 0; i < n; i++){
        cin >> a[i];
    }
    sort(all(a));
    vector<int> dbl;
    vector<int> sngl;
    ll dans = 0;
    for(int i = 0; i < n; i++){
        if(i + 1 < n){
            if(a[i] == a[i + 1]){
                dbl.push_back(a[i]);
                i++;
                dans += 2 * a[i];
            } else {
                sngl.push_back(a[i]);
            }
        } else {
            sngl.push_back(a[i]);
        }
    }
    if(dbl.empty()){
        cout << "0\n";
        return;
    }
    if(sngl.size() == 0){
        cout << dans << "\n";
        return;
    }
    ll ans = 0;
    if(dbl.size() > 1){
        ans = dans;
    }
    // int md = dbl.back();
    for(int i = 0; i < sngl.size(); i++){
        if(sngl[i] < dans){
            ans = max(ans, dans + sngl[i]);
        }
    }
    if(sngl.size() == 1){
        cout << ans << "\n";
        return;
    }
    for(int i = 0; i < sngl.size(); i++){
        int idx = bnsrch(sngl, i, sngl.size(), dans + sngl[i]);
        if(idx != i){
            ans = max(ans, dans + sngl[i] + sngl[idx]);
        }
    }
    cout << ans << "\n";
}

 
int32_t main(){
    BOOST;
 
    int q = 1; cin >> q;
    while(q--){
        solve();
    }
    return 0;
}
